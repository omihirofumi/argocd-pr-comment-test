apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  namespace: argocd
data:
  service.github: |
    appID: 1232703
    installationID: 65419571
    privateKey: $github-privateKey
  service.slack: |
    token: $slack-token

  template.app-deployed: |
    message: |
      Application {{.app.metadata.name}} is now running new version of deployments manifests.
    github:
      repoURLPath: "{{.app.spec.source.repoURL}}"
      revisionPath: "{{.app.status.operationState.syncResult.revision}}"
      status:
        state: success
        label: "continuous-delivery/{{.app.metadata.name}}"
        targetURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
      deployment:
        state: success
        environment: production
        environmentURL: "https://{{.app.metadata.name}}.example.com"
        logURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        requiredContexts: []
        autoMerge: true
        transientEnvironment: false
        reference: v1.0.0
      pullRequestComment:
        content: |
          Application {{.app.metadata.name}} is now running new version of deployments manifests.
          See more here: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true
      checkRun:
        name: "continuous-delivery/{{.app.metadata.name}}"
        details_url: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        status: completed
        conclusion: success
        started_at: "YYYY-MM-DDTHH:MM:SSZ"
        completed_at: "YYYY-MM-DDTHH:MM:SSZ"
        output:
          title: "Deployment of {{.app.metadata.name}} on ArgoCD"
          summary: "Application {{.app.metadata.name}} is now running new version of deployments manifests."
          text: |
            Application {{.app.metadata.name}} is now running new version of deployments manifests.
            See more here: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true
  template.app-sync-succeeded: |
    email:
      subject: Application {{.app.metadata.name}} has been successfully synced.
    message: |
      {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.
      Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
    slack:
      attachments: |
        [{
          "title": "[{{.context.env}}]{{ .app.metadata.name}}",
          "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
          "color": "#18be52",
          "fields": [
          {{$endpoint_key := (print "endpoint_" .app.metadata.name)}}
          {{ if ne (index .context $endpoint_key ) "" }} {
            "title": "Application URL",
            "value": "{{index .context $endpoint_key }}",
            "short": false
          },
          {{end}}
          {{ if .app.status.summary.externalURLs }} {
            "title": "Application URL(Ingress)",
            "value": "{{ range .app.status.summary.externalURLs }}{{ . }} {{ end }}",
            "short": false
          },
          {{end}}
          {
            "title": "Sync Status",
            "value": "{{.app.status.sync.status}}",
            "short": true
          },
          {
            "title": "Repository",
            "value": "{{.app.spec.source.repoURL}}",
            "short": true
          }
          {{range $index, $c := .app.status.conditions}}
          {{if not $index}},{{end}}
          {{if $index}},{{end}}
          {
            "title": "{{$c.type}}",
            "value": "{{$c.message}}",
            "short": true
          }
          {{end}}
          ]
        }]
      deliveryPolicy: Post
      groupingKey: ""
      notifyBroadcast: false
    teams:
      facts: |
        [{
          "name": "Sync Status",
          "value": "{{.app.status.sync.status}}"
        },
        {
          "name": "Synced at",
          "value": "{{.app.status.operationState.finishedAt}}"
        },
        {
          "name": "Repository",
          "value": "{{.app.spec.source.repoURL}}"
        }
        {{range $index, $c := .app.status.conditions}}
          {{if not $index}},{{end}}
          {{if $index}},{{end}}
          {
            "name": "{{$c.type}}",
            "value": "{{$c.message}}"
          }
        {{end}}
        ]
      potentialAction: |-
        [{
          "@type":"OpenUri",
          "name":"Operation Details",
          "targets":[{
            "os":"default",
            "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
          }]
        },
        {
          "@type":"OpenUri",
          "name":"Open Repository",
          "targets":[{
            "os":"default",
            "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
          }]
        }]
      themeColor: '#000080'
      title: Application {{.app.metadata.name}} has been successfully synced
  trigger.on-created: |
    - description: Application is created.
      oncePer: app.metadata.name
      send:
      - app-created
      when: "true"
  trigger.on-deleted: |
    - description: Application is deleted.
      oncePer: app.metadata.name
      send:
      - app-deleted
      when: app.metadata.deletionTimestamp != nil
  trigger.on-deployed: |
    - description: Application is synced and healthy. Triggered once per commit.
      oncePer: app.status.operationState.syncResult.revision
      send:
      - app-deployed
      when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status
        == 'Healthy'
  trigger.on-health-degraded: |
    - description: Application has degraded
      send:
      - app-health-degraded
      when: app.status.health.status == 'Degraded'
  trigger.on-sync-failed: |
    - description: Application syncing has failed
      send:
      - app-sync-failed
      when: app.status.operationState.phase in ['Error', 'Failed']
  trigger.on-sync-running: |
    - description: Application is being synced
      send:
      - app-sync-running
      when: app.status.operationState.phase in ['Running']
  trigger.on-sync-status-unknown: |
    - description: Application status is 'Unknown'
      send:
      - app-sync-status-unknown
      when: app.status.sync.status == 'Unknown'
  #trigger.on-sync-succeeded: |
  #  - description: Application syncing has succeeded
  #    send:
  #    - app-sync-succeeded
  #    when: app.status.operationState.phase in ['Succeeded']
  # customized on-sync-succeed
  trigger.on-sync-succeeded: |
    - description: Application syncing has succeeded and health
      send:
      - app-sync-succeeded
      when: app.status.operationState.phase in ['Succeeded']  and app.status.health.status == 'Healthy'
      oncePer: app.status.sync.revision
