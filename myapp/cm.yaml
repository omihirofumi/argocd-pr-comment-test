apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  namespace: argocd
data:
  service.github: |
    appID: 1232703
    installationID: 65419571
    privateKey: $github-privateKey
  service.slack: |
    token: $slack-token

  template.app-deployed: |
    message: |
      Application {{.app.metadata.name}} is now running new version of deployments manifests.
    github:
      repoURLPath: "{{.app.spec.source.repoURL}}"
      revisionPath: "{{.app.status.operationState.syncResult.revision}}"
      status:
        state: success
        label: "continuous-delivery/{{.app.metadata.name}}"
        targetURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
      deployment:
        state: success
        environment: production
        environmentURL: "https://{{.app.metadata.name}}.example.com"
        logURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        requiredContexts: []
        autoMerge: true
        transientEnvironment: false
        reference: v1.0.0
      pullRequestComment:
        content: |
          Application {{.app.metadata.name}} is now running new version of deployments manifests.
          See more here: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true
      checkRun:
        name: "continuous-delivery/{{.app.metadata.name}}"
        details_url: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        status: completed
        conclusion: success
        started_at: "YYYY-MM-DDTHH:MM:SSZ"
        completed_at: "YYYY-MM-DDTHH:MM:SSZ"
        output:
          title: "Deployment of {{.app.metadata.name}} on ArgoCD"
          summary: "Application {{.app.metadata.name}} is now running new version of deployments manifests."
          text: |
            Application {{.app.metadata.name}} is now running new version of deployments manifests.
            See more here: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true
  template.app-sync-succeeded: |
    slack:
      attachments: |
        [{
          "title": "{{.app.metadata.name}}",
          "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
          "color": "#ff0000",
          "fields": [{
            "title": "Sync Status",
            "value": "{{.app.status.sync.status}}",
            "short": true
          }, {
            "title": "Repository",
            "value": "{{.app.spec.source.repoURL}}",
            "short": true
          }]
        }]
      # Aggregate the messages to the thread by git commit hash
      groupingKey: "{{.app.status.sync.revision}}"
      notifyBroadcast: true
  template.my-custom-template-slack-template: |
    message: |
      {{ $commitMessage := (call .repo.GetCommitMetadata .app.status.sync.revision).Message }} {{ $prText := regexFind "PR-[0-9]+" $commitMessage }}
      {{ $prText := regexFind "PR-[0-9]+" $commitMessage }}
      {{ $prNumber := "" }}
      {{ if $prText }}
        {{ $prNumber = trimPrefix "PR-" $prText }}
        <https://github.com/omihirofumi/xxxxxx/pull/{{ $prNumber }}|PR-{{ $prNumber }}>がDev環境に反映されました。
      {{ end }}
      対象:apps/{{.app.metadata.name}}

  trigger.on-created: |
    - description: Application is created.
      oncePer: app.metadata.name
      send:
      - app-created
      when: "true"
  trigger.on-deleted: |
    - description: Application is deleted.
      oncePer: app.metadata.name
      send:
      - app-deleted
      when: app.metadata.deletionTimestamp != nil
  trigger.on-deployed: |
    - description: Application is synced and healthy. Triggered once per commit.
      oncePer: app.status.operationState.syncResult.revision
      send:
      - app-deployed
      when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status
        == 'Healthy'
  trigger.on-health-degraded: |
    - description: Application has degraded
      send:
      - app-health-degraded
      when: app.status.health.status == 'Degraded'
  trigger.on-sync-failed: |
    - description: Application syncing has failed
      send:
      - app-sync-failed
      when: app.status.operationState.phase in ['Error', 'Failed']
  trigger.on-sync-running: |
    - description: Application is being synced
      send:
      - app-sync-running
      when: app.status.operationState.phase in ['Running']
  trigger.on-sync-status-unknown: |
    - description: Application status is 'Unknown'
      send:
      - app-sync-status-unknown
      when: app.status.sync.status == 'Unknown'
  #trigger.on-sync-succeeded: |
  #  - description: Application syncing has succeeded
  #    send:
  #    - app-sync-succeeded
  #    when: app.status.operationState.phase in ['Succeeded']
  # customized on-sync-succeed
  trigger.on-sync-succeeded: |
    - description: Application syncing has succeeded and health
      send:
      - app-sync-succeeded
      when: app.status.operationState.phase in ['Succeeded']  and app.status.health.status == 'Healthy'
      oncePer: app.status.sync.revision
  trigger.on-sync-succeeded2: |
    - description: Application syncing has succeeded and health
      when: |
        app.status.operationState.syncResult != nil and
        app.status.operationState.phase in ['Succeeded'] and
        app.status.health.status == 'Healthy' and
        ((call .repo.GetCommitMetadata app.status.operationState.syncResult.revision).Message matches '.*change image tags of \\[[^\\]]*\\b' + app.metadata.name + '\\b[^\\]]*\\].*' or
         (call .repo.GetCommitMetadata app.status.operationState.syncResult.revision).Message matches '.*change image tags of \\[' + app.metadata.name + '\\].*')
      send:
      - my-custom-template-slack-template
      oncePer: app.status.sync.revision
